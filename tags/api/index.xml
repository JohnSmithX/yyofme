<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Api on YY of Me</title>
    <link>http://xushu.ai/tags/api/</link>
    <description>Recent content in Api on YY of Me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 02 Aug 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://xushu.ai/tags/api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HTTP API设计</title>
      <link>http://xushu.ai/post/restful-api-design/</link>
      <pubDate>Sat, 02 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://xushu.ai/post/restful-api-design/</guid>
      <description>HTTP API设计指导 via github@geemus
介绍 作者的本意是介绍heroku平台的 http-json API设计 heroku官方文档 本文意在推荐一套成熟的api设计模式来减少读者在api设计上遇到的坑.无论如何,这篇指导都比较适合 初涉api设计,或者在api设计上遇到瓶颈的同学.学习之-
准备工作 1. 需要tls 强制依赖tls握手协议,所有不通过tls的请求都视为非法的,阻止并返回 403 错误.不推荐使用重定向动作, 因为重定向行为本身就接受了所有的非法的客户端请求,而且加倍了服务器流量,重定向的请求同样没有通过tls,这 是个非常差的设计.
2. 在accepts头参数中表明api的版本 不要使用默认的版本,要让客户端请求明确表明它们需要的api版本通过在accepts头参数里面加上版本号. 如:
Accept: application/vnd.heroku+json; version=3  3. 使用Etags 使用 etag 头参数来缓存数据,客户端只需回传 If-None-Match 验证数据是否过期,这样可以节省服务器资源.
4. 通过Request-Ids追踪请求 使用 Request-Id 头参数,协助追中和debug请求.
5. Content-Range标记页码 请求 Request 1. 使用状态码 状态码介绍内容省略,可以通过google以及baidu等搜索出详细介绍.HTTP response code spec
2. 返回完整的资源 请求成功后(200, 201状态码),尽可能的返回完整的资源.即使是 put/patch 和 delete 请求. 如:
$ curl -X DELETE \ https://service.com/apps/1f9b/domains/0fd4  HTTP/1.1 200 OK Content-Type: application/json;charset=utf-8 .</description>
    </item>
    
  </channel>
</rss>