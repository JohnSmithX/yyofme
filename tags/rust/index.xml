<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on YY of Me</title>
    <link>http://xushu.ai/tags/rust/</link>
    <description>Recent content in Rust on YY of Me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 20 Sep 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://xushu.ai/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rust的Deref coercion</title>
      <link>http://xushu.ai/post/rust-deref/</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://xushu.ai/post/rust-deref/</guid>
      <description>Rust的Deref coercion 了解强制多态  编译程序通过语义操作，把操作对象的类型强行加以变换，以符合函数或操作符的要求。程序设计语言中基本类型的大多数操作符，在发生不同类型的数据进行混合运算时，编译程序一般都会进行强制多态。程序员也可以显示地进行强制多态的操作(Casting)。举个例子，比如，int+double，编译系统一般会把int转换为double，然后执行double+double运算，这个int-&amp;gt;double的转换，就实现了强制多态，即可是隐式的，也可显式转换。
 简单来说当变量遇到某种操作时，发生了类型转换。
Deref trait Deref是Rust的一个trait。trait相当于其它语言的接口或者协议。Deref的一般用来重载*解引用运算符。
use std::ops::Deref; struct Example { value: i32, } impl Deref for Example { type Target = i32; fn deref(&amp;amp;self) -&amp;gt; &amp;amp;i32 { &amp;amp;self.value } } fn main() { let x = Example{ value: 5 }; assert_eq!(5, *x); // 解引用会执行 Deref::deref(&amp;amp;self) 返回一个i32类型 }  Deref coercion deref coercions 解引用强制多态在Rust中的规则：假如一个类型U实现了Deref，那么 &amp;amp;U类型将自动转化成&amp;amp;Self::Target。(Target具体类型)
struct U&amp;lt;T&amp;gt;(T); impl&amp;lt;T&amp;gt; Deref for U&amp;lt;T&amp;gt; { type Target = T; fn deref(&amp;amp;self) -&amp;gt; &amp;amp;Self::Target { &amp;amp;self.</description>
    </item>
    
    <item>
      <title>Rust的三种指针</title>
      <link>http://xushu.ai/post/rust-three-pointers/</link>
      <pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://xushu.ai/post/rust-three-pointers/</guid>
      <description>Rust的三种指针 Summary 他们都有谁？  所有权指针 unique pointers 借贷指针 borrowed pointers 原始指针 raw pointers  有什么不同？  所有权（不是指针）：绑定一个值并拥有所有权 let a = 5; a有5的所有权 所有权指针：和所有权类似但所绑定的值是一个指针类型 let a = Box::new(5); 借贷指针：引用一个现有的值，但是并不分配内存，只是一个地址的别名 原始指针：和c/c++指针类似  Tips：  数据可变性遵从指针的可变性let a = Box::new(5);不可变，let mut a = Box::new(5);可变 在任何时候只有一个所有权指针指向同一内存 所有权指针和原始指针必须解引用才能它们，但在Rust中，方法调用会自动解引用
struct Person; impl Person { fn say_hello(self) { println!(&amp;quot;hello&amp;quot;); } } let a = Box::new(Person); let b: Person = *a;// 需要解引用 // or let a.say_hello();// 自动解引用  值的所有权可以通过重新绑定来转移，但只能存在一个owner，当值不在有绑定时，会被释放</description>
    </item>
    
  </channel>
</rss>