<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>指针 on YY of Me</title>
    <link>http://xushu.ai/tags/%E6%8C%87%E9%92%88/</link>
    <description>Recent content in 指针 on YY of Me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 09 Sep 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://xushu.ai/tags/%E6%8C%87%E9%92%88/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rust的三种指针</title>
      <link>http://xushu.ai/post/rust-three-pointers/</link>
      <pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://xushu.ai/post/rust-three-pointers/</guid>
      <description>Rust的三种指针 Summary 他们都有谁？  所有权指针 unique pointers 借贷指针 borrowed pointers 原始指针 raw pointers  有什么不同？  所有权（不是指针）：绑定一个值并拥有所有权 let a = 5; a有5的所有权 所有权指针：和所有权类似但所绑定的值是一个指针类型 let a = Box::new(5); 借贷指针：引用一个现有的值，但是并不分配内存，只是一个地址的别名 原始指针：和c/c++指针类似  Tips：  数据可变性遵从指针的可变性let a = Box::new(5);不可变，let mut a = Box::new(5);可变 在任何时候只有一个所有权指针指向同一内存 所有权指针和原始指针必须解引用才能它们，但在Rust中，方法调用会自动解引用
struct Person; impl Person { fn say_hello(self) { println!(&amp;quot;hello&amp;quot;); } } let a = Box::new(Person); let b: Person = *a;// 需要解引用 // or let a.say_hello();// 自动解引用  值的所有权可以通过重新绑定来转移，但只能存在一个owner，当值不在有绑定时，会被释放</description>
    </item>
    
  </channel>
</rss>