<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>YY of Me</title>
    <link>http://xushu.ai/</link>
    <description>Recent content on YY of Me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 20 Sep 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://xushu.ai/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rust的Deref coercion</title>
      <link>http://xushu.ai/post/rust-deref/</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://xushu.ai/post/rust-deref/</guid>
      <description>Rust的Deref coercion 了解强制多态  编译程序通过语义操作，把操作对象的类型强行加以变换，以符合函数或操作符的要求。程序设计语言中基本类型的大多数操作符，在发生不同类型的数据进行混合运算时，编译程序一般都会进行强制多态。程序员也可以显示地进行强制多态的操作(Casting)。举个例子，比如，int+double，编译系统一般会把int转换为double，然后执行double+double运算，这个int-&amp;gt;double的转换，就实现了强制多态，即可是隐式的，也可显式转换。
 简单来说当变量遇到某种操作时，发生了类型转换。
Deref trait Deref是Rust的一个trait。trait相当于其它语言的接口或者协议。Deref的一般用来重载*解引用运算符。
use std::ops::Deref; struct Example { value: i32, } impl Deref for Example { type Target = i32; fn deref(&amp;amp;self) -&amp;gt; &amp;amp;i32 { &amp;amp;self.value } } fn main() { let x = Example{ value: 5 }; assert_eq!(5, *x); // 解引用会执行 Deref::deref(&amp;amp;self) 返回一个i32类型 }  Deref coercion deref coercions 解引用强制多态在Rust中的规则：假如一个类型U实现了Deref，那么 &amp;amp;U类型将自动转化成&amp;amp;Self::Target。(Target具体类型)
struct U&amp;lt;T&amp;gt;(T); impl&amp;lt;T&amp;gt; Deref for U&amp;lt;T&amp;gt; { type Target = T; fn deref(&amp;amp;self) -&amp;gt; &amp;amp;Self::Target { &amp;amp;self.</description>
    </item>
    
    <item>
      <title>Rust的三种指针</title>
      <link>http://xushu.ai/post/rust-three-pointers/</link>
      <pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://xushu.ai/post/rust-three-pointers/</guid>
      <description>Rust的三种指针 Summary 他们都有谁？  所有权指针 unique pointers 借贷指针 borrowed pointers 原始指针 raw pointers  有什么不同？  所有权（不是指针）：绑定一个值并拥有所有权 let a = 5; a有5的所有权 所有权指针：和所有权类似但所绑定的值是一个指针类型 let a = Box::new(5); 借贷指针：引用一个现有的值，但是并不分配内存，只是一个地址的别名 原始指针：和c/c++指针类似  Tips：  数据可变性遵从指针的可变性let a = Box::new(5);不可变，let mut a = Box::new(5);可变 在任何时候只有一个所有权指针指向同一内存 所有权指针和原始指针必须解引用才能它们，但在Rust中，方法调用会自动解引用
struct Person; impl Person { fn say_hello(self) { println!(&amp;quot;hello&amp;quot;); } } let a = Box::new(Person); let b: Person = *a;// 需要解引用 // or let a.say_hello();// 自动解引用  值的所有权可以通过重新绑定来转移，但只能存在一个owner，当值不在有绑定时，会被释放</description>
    </item>
    
    <item>
      <title>读东野圭吾小说《白夜行》</title>
      <link>http://xushu.ai/post/book-baiyexing/</link>
      <pubDate>Mon, 11 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://xushu.ai/post/book-baiyexing/</guid>
      <description>&amp;nbsp;&amp;nbsp;说实话，读完这篇小说有一段时间了。但每当想起，小说的情节历历在目，给人影响深刻。我写这篇日志的目的是为了记录现阶段对它的理解， 以便日后看到时希望能够产生新的理解和感情，也将作为对成长的理解。
&amp;nbsp;&amp;nbsp;对于整篇小说，作家东野圭吾不仅牢牢的把握住了逻辑的完整严密，甚至于细节部分都无懈可击，更是掌握了读者读书过程中的思维和情绪，轻重缓和 恰到好处，情节逻辑紧密，悬念似有非无，引人入胜。影响深刻的是，对于全书剧情一直都能处在 ‘懂了’ 和 ‘又不懂’ 之间。冥冥之中，猜到了结局，而又 迫切想要知道作者给我们的结局，就是在这种即矛盾又欣喜的气氛下，《白夜行》给我们带来了一次非常难忘的体验。
&amp;nbsp;&amp;nbsp;有关小说剧情，我不愿在这赘述，甚至是有意规避它。原因之一就是我非常希望对此书感兴趣的朋友能够一口气读完全本，是的这本书并不厚，甚至是不可思议， 因为一本不到400页的小说，仿佛能够带领读者浏览完人生中最重要的前30年。整篇推理逻辑都合情合理，但是唯一让我摸不着头脑的是，雪穗和亮司到底想要什么 或者是一切的行为有什么目的？表面上看，雪穗汲取的是金钱，名誉，地位，权利，外表的光鲜，为达目的而采取的一切行为在小说中描述起来已然可以称为病态。 不断使用肮脏的手段，利用他人的不幸来满足自身的欲望，但即使到小说结尾我也没有意会到雪穗的一丝毫满足，仿佛她把这种不择手段本身当成了生活的必需品 ，就好似生活之于柴米油盐,那雪穗究竟追求的何物？在我看来唯一解释的通的是，童年阴影扭曲下的雪穗，生存的唯一动力只剩下‘夺取’了。她所得到的一切都是从身边 的亲友身上夺取而来的，并且她并没有因获得的事物而感到心满意足，仅仅只是‘夺取’的过程，看着他人的不幸来满足自己。
 我的天空没有太阳，总是黑夜，但并不暗，因为有东西代替了太阳。虽然没有太阳那么明亮，但对我来说已经足够。凭借这份光，我便能把黑夜当成白天。 我从来就没有太阳，所以不怕失去。 &amp;ndash; 雪穗
 &amp;nbsp;&amp;nbsp;小说的男主人公亮司，纵观故事前后，亮司一直并且只在做两件事，一是赎罪，二就是对雪穗的感情，虽然作者并没有描写男女主人公之间的感情，但是细细推敲 ，不难发现小说中多次出现出现的《飘》给了我们完整的答案，《飘》的结尾处，
 白瑞德：“思嘉，我从来不是那样的人，不能耐心地拾起一片碎片，把它们凑合在一起，然后对自己说这个修补好了的东西跟新的完全一样。一样东西破碎了就是破碎了&amp;mdash;-我宁愿记住它最好时的模样，而不想把它修补好。然后终生看着那些碎了的地方。”
 这一句就暗示了《白夜行》总将回事一个悲剧，至少不可能出现幻想中的头顶有太阳，手牵着手，在白天散步。亮司说过：“想要在白天走路。”结合《飘》的结尾，可以看出亮司所 期望的并不是多年之后还能够和雪穗并肩走在阳光下，而是希望这一切，桐原洋介的兽行，弑父，雪穗杀母，以及之后的所有的罪行从未发生，而他们只是两个普普通通的孩子，可以牵着彼此的手 漫步在阳光之下。但是，读完小说，正是这一些简简单单的希望对于雪和亮来说是多么的残忍，也正是因为这些简简单单的希望触动了读者的心弦，让读者对雪和亮产生不了一丝一毫的怨恨。 东野圭吾成功塑造了一对阴暗而悲情的主角。
&amp;nbsp;&amp;nbsp;写在最后，结局以亮司的死画上了句号，不可说不圆满。小说最后描写雪穗的背影犹如白色的影子，因为对于雪穗来说代替太阳的亮司死了，相互依赖才走到今日的两人早已成为一个 整体，所以亮司的死可以认为也带走了雪穗的灵魂，雪穗的今后人生可想而知。作者向我们展示了另一种形式的爱，更深层次的爱，发人深省，值得一读。</description>
    </item>
    
    <item>
      <title>HTTP API设计</title>
      <link>http://xushu.ai/post/restful-api-design/</link>
      <pubDate>Sat, 02 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://xushu.ai/post/restful-api-design/</guid>
      <description>HTTP API设计指导 via github@geemus
介绍 作者的本意是介绍heroku平台的 http-json API设计 heroku官方文档 本文意在推荐一套成熟的api设计模式来减少读者在api设计上遇到的坑.无论如何,这篇指导都比较适合 初涉api设计,或者在api设计上遇到瓶颈的同学.学习之-
准备工作 1. 需要tls 强制依赖tls握手协议,所有不通过tls的请求都视为非法的,阻止并返回 403 错误.不推荐使用重定向动作, 因为重定向行为本身就接受了所有的非法的客户端请求,而且加倍了服务器流量,重定向的请求同样没有通过tls,这 是个非常差的设计.
2. 在accepts头参数中表明api的版本 不要使用默认的版本,要让客户端请求明确表明它们需要的api版本通过在accepts头参数里面加上版本号. 如:
Accept: application/vnd.heroku+json; version=3  3. 使用Etags 使用 etag 头参数来缓存数据,客户端只需回传 If-None-Match 验证数据是否过期,这样可以节省服务器资源.
4. 通过Request-Ids追踪请求 使用 Request-Id 头参数,协助追中和debug请求.
5. Content-Range标记页码 请求 Request 1. 使用状态码 状态码介绍内容省略,可以通过google以及baidu等搜索出详细介绍.HTTP response code spec
2. 返回完整的资源 请求成功后(200, 201状态码),尽可能的返回完整的资源.即使是 put/patch 和 delete 请求. 如:
$ curl -X DELETE \ https://service.com/apps/1f9b/domains/0fd4  HTTP/1.1 200 OK Content-Type: application/json;charset=utf-8 .</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://xushu.ai/about/</link>
      <pubDate>Sun, 01 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://xushu.ai/about/</guid>
      <description> Feature  github@JohnSmithX v2ex@JohnSmith  </description>
    </item>
    
    <item>
      <title>写日志</title>
      <link>http://xushu.ai/post/first-page/</link>
      <pubDate>Sun, 01 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://xushu.ai/post/first-page/</guid>
      <description>代码123 &amp;emsp;&amp;emsp;最近又回顾了一下之前读过的开源类库，本有着这个类库我应该能理解了，能够熟练使用了的想法。 但每当要表达的时候就不知道如何下手，想理理关于它的思绪，发现它竟然如此陌生。陌生到我再看一眼它的 代码就又熟悉了，但是无论如何都不能确定自己之前读到过这里。
这并不是无痛呻吟，这应该就是所谓的，新手和大牛之间巨大的鸿沟。  &amp;emsp;&amp;emsp;之后我做了个决定，决定组织好自己的语言，记录我眼中的代码。我想它们应该是活泼可爱的，温顺中并不失 调皮.总会给喜爱它的人们带来惊喜。
&amp;ndash;《可爱的代码》</description>
    </item>
    
  </channel>
</rss>